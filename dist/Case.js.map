{"version":3,"sources":["../src/Case.js"],"names":["Case","props","children","expression","debug","Array","isArray","val","includes","console","log","join","React","Component","displayName","propTypes","PropTypes","oneOfType","arrayOf","string","number","isRequired"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAGMA,I;;;;;;;;;;;iCAKF;AACI,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAZ,IAAwB,CAAC,KAAKD,KAAL,CAAWE,UAAxC,EAAoD;AAChD,uBAAO,IAAP;AACH;AACD,gBAAMC,QAAQ,KAAKH,KAAL,CAAWG,KAAX,IAAoB,KAAlC;AACA,gBAAIC,MAAMC,OAAN,CAAc,KAAKL,KAAL,CAAWM,GAAzB,CAAJ,EAAmC;AAC/B,oBAAI,KAAKN,KAAL,CAAWM,GAAX,CAAeC,QAAf,CAAwB,KAAKP,KAAL,CAAWE,UAAnC,CAAJ,EAAoD;AAChD,wBAAIC,KAAJ,EAAWK,QAAQC,GAAR,YAAqB,KAAKT,KAAL,CAAWM,GAAX,CAAeI,IAAf,CAAoB,GAApB,CAArB;AACX,2BAAQ;AAAC,uCAAD,CAAO,QAAP;AAAA;AAAkB,6BAAKV,KAAL,CAAWC;AAA7B,qBAAR;AACH;AACD,oBAAIE,KAAJ,EAAWK,QAAQC,GAAR,YAAqB,KAAKT,KAAL,CAAWM,GAAX,CAAeI,IAAf,CAAoB,GAApB,CAArB;AACd,aAND,MAMO;AACH,oBAAI,KAAKV,KAAL,CAAWE,UAAX,KAA0B,KAAKF,KAAL,CAAWM,GAAzC,EAA8C;AAC1C,wBAAIH,KAAJ,EAAWK,QAAQC,GAAR,YAAqB,KAAKT,KAAL,CAAWM,GAAhC;AACX,2BAAQ;AAAC,uCAAD,CAAO,QAAP;AAAA;AAAkB,6BAAKN,KAAL,CAAWC;AAA7B,qBAAR;AACH;AACD,oBAAIE,KAAJ,EAAWK,QAAQC,GAAR,YAAqB,KAAKT,KAAL,CAAWM,GAAhC;AACd;AACD,mBAAO,IAAP;AACH;;;;EAxBcK,gBAAMC,S;;AAAnBb,I,CAEKc,W,GAAc,M;;;AA2BzBd,KAAKe,SAAL,GAAiB;AACbR,SAAKS,oBAAUC,SAAV,CAAoB,CACrBD,oBAAUE,OAAV,CAAkBF,oBAAUG,MAA5B,CADqB,EAErBH,oBAAUE,OAAV,CAAkBF,oBAAUI,MAA5B,CAFqB,EAGrBJ,oBAAUG,MAHW,EAIrBH,oBAAUI,MAJW,CAApB,EAKFC,UANU;AAOblB,gBAAYa,oBAAUC,SAAV,CAAoB,CAC5BD,oBAAUG,MADkB,EAE5BH,oBAAUI,MAFkB,CAApB,CAPC;AAWbhB,WAAOY,oBAAUG;AAXJ,CAAjB;;kBAcenB,I","file":"Case.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass Case extends React.Component {\n\n    static displayName = 'Case';\n\n    render()\n    {\n        if (!this.props.children || !this.props.expression) {\n            return null;\n        }\n        const debug = this.props.debug || false;\n        if (Array.isArray(this.props.val)) {\n            if (this.props.val.includes(this.props.expression)) {\n                if (debug) console.log(`Case \"${this.props.val.join(',')}\": match case`);\n                return (<React.Fragment>{ this.props.children }</React.Fragment>);\n            }\n            if (debug) console.log(`Case \"${this.props.val.join(',')}\": no match`);\n        } else {\n            if (this.props.expression === this.props.val) {\n                if (debug) console.log(`Case \"${this.props.val}\": match case`);\n                return (<React.Fragment>{ this.props.children }</React.Fragment>);\n            }\n            if (debug) console.log(`Case \"${this.props.val}\": no match`);\n        }\n        return null;\n    }\n\n}\n\n\nCase.propTypes = {\n    val: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.string),\n        PropTypes.arrayOf(PropTypes.number),\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n    expression: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    debug: PropTypes.string\n};\n\nexport default Case;\n"]}
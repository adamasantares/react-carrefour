{"version":3,"sources":["../src/CaseDefault.js"],"names":["CaseDefault","props","children","expression","values","debug","hasMatch","val","Array","isArray","includes","console","log","React","Component","displayName","propTypes","PropTypes","array","oneOfType","string","number"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAGMA,W;;;;;;;;;;;iCAKF;AACI,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAZ,IAAwB,CAAC,KAAKD,KAAL,CAAWE,UAApC,IAAkD,CAAC,KAAKF,KAAL,CAAWG,MAAlE,EAA0E;AACtE,uBAAO,IAAP;AACH;AACD,gBAAMC,QAAQ,KAAKJ,KAAL,CAAWI,KAAX,IAAoB,KAAlC;AACA,gBAAIC,WAAW,KAAf;AALJ;AAAA;AAAA;;AAAA;AAMI,qCAAkB,KAAKL,KAAL,CAAWG,MAA7B,8HAAqC;AAAA,wBAA1BG,GAA0B;;AACjC,wBAAIC,MAAMC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACpB,4BAAIA,IAAIG,QAAJ,CAAa,KAAKT,KAAL,CAAWE,UAAxB,CAAJ,EAAyC;AACrCG,uCAAW,IAAX,CAAiB;AACpB;AACJ,qBAJD,MAIO;AACH,4BAAI,KAAKL,KAAL,CAAWE,UAAX,KAA0BI,GAA9B,EAAmC;AAC/BD,uCAAW,IAAX,CAAiB;AACpB;AACJ;AACJ;AAhBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBI,gBAAID,SAAS,CAACC,QAAd,EAAwBK,QAAQC,GAAR;AACxB,mBAAON,WACH,IADG,GACK;AAAC,+BAAD,CAAO,QAAP;AAAA;AAAkB,qBAAKL,KAAL,CAAWC;AAA7B,aADZ;AAEH;;;;EAzBqBW,gBAAMC,S;;AAA1Bd,W,CAEKe,W,GAAc,a;;;AA4BzBf,YAAYgB,SAAZ,GAAwB;AACpBZ,YAAQa,oBAAUC,KADE;AAEpBf,gBAAYc,oBAAUE,SAAV,CAAoB,CAC5BF,oBAAUG,MADkB,EAE5BH,oBAAUI,MAFkB,CAApB,CAFQ;AAMpBhB,WAAOY,oBAAUG;AANG,CAAxB;;kBASepB,W","file":"CaseDefault.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass CaseDefault extends React.Component {\n\n    static displayName = 'CaseDefault';\n\n    render()\n    {\n        if (!this.props.children || !this.props.expression || !this.props.values) {\n            return null;\n        }\n        const debug = this.props.debug || false;\n        let hasMatch = false;\n        for (const val of this.props.values) {\n            if (Array.isArray(val)) {\n                if (val.includes(this.props.expression)) {\n                    hasMatch = true; break;\n                }\n            } else {\n                if (this.props.expression === val) {\n                    hasMatch = true; break;\n                }\n            }\n        }\n        if (debug && !hasMatch) console.log(`CaseDefault: no any other matches`);\n        return hasMatch ?\n            null : (<React.Fragment>{ this.props.children }</React.Fragment>);\n    }\n\n}\n\n\nCaseDefault.propTypes = {\n    values: PropTypes.array,\n    expression: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    debug: PropTypes.string\n};\n\nexport default CaseDefault;\n"]}
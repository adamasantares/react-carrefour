{"version":3,"sources":["../src/ForEach.js"],"names":["ForEach","props","children","Array","isArray","argument","as","elements","key","value","_items","map","child","type","React","cloneElement","push","of","Component","propTypes","PropTypes","array","isRequired","string"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAGMA,O;;;;;;;;;;;iCAGF;AAAA;;AACI,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAhB,EAA0B;AACtB,uBAAO,IAAP;AACH;AACD,gBAAIA,WAAW,KAAKD,KAAL,CAAWC,QAA1B;AACA,gBAAI,CAACC,MAAMC,OAAN,CAAcF,QAAd,CAAL,EAA8B;AAC1BA,2BAAW,CAAEA,QAAF,CAAX;AACH;AACD,gBAAMG,WAAW,KAAKJ,KAAL,CAAWK,EAA5B;AACA,gBAAMC,WAAW,EAAjB;AACA,gBAAIC,MAAM,CAAV;;AAVJ,uCAYeC,KAZf;AAaQ,oBAAMC,SAASR,SAASS,GAAT,CAAa,iBAAS;AACjC,wBAAI,OAAOC,KAAP,KAAkB,UAAtB,EAAkC;AAC9BA,gCAAQA,MAAMH,KAAN,CAAR;AACH;AACD,wBAAIG,MAAMC,IAAN,IAAcD,MAAMX,KAAxB,EAA+B;AAC3B,4BAAMA,QAAQ,EAAEO,QAAF,EAAd;AACAP,8BAAMI,QAAN,IAAkBI,KAAlB;AACAD;AACA,+BAAOM,gBAAMC,YAAN,CAAmBH,KAAnB,EAA0BX,KAA1B,CAAP;AACH;AACD,2BAAO,IAAP;AACH,iBAXc,EAWZ,MAXY,CAAf;AAYAM,yBAASS,IAAT,CAAcN,MAAd;AAzBR;;AAAA;AAAA;AAAA;;AAAA;AAYI,qCAAoB,KAAKT,KAAL,CAAWgB,EAA/B,8HAAmC;AAAA,wBAAxBR,KAAwB;;AAAA,0BAAxBA,KAAwB;AAclC;AA1BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BI,mBACI;AAAC,+BAAD,CAAO,QAAP;AAAA;AACMF;AADN,aADJ;AAKH;;;;EAnCiBO,gBAAMI,S;;AAwC5BlB,QAAQmB,SAAR,GAAoB;AAChBF,QAAIG,oBAAUC,KAAV,CAAgBC,UADJ;AAEhBhB,QAAIc,oBAAUG,MAAV,CAAiBD;AAFL,CAApB;;kBAKetB,O","file":"ForEach.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass ForEach extends React.Component {\n\n    render()\n    {\n        if (!this.props.children) {\n            return null;\n        }\n        let children = this.props.children;\n        if (!Array.isArray(children)) {\n            children = [ children ];\n        }\n        const argument = this.props.as;\n        const elements = [];\n        let key = 0;\n\n        for (const value of this.props.of) {\n            const _items = children.map(child => {\n                if (typeof(child) === 'function') {\n                    child = child(value);\n                }\n                if (child.type && child.props) {\n                    const props = { key };\n                    props[argument] = value;\n                    key++;\n                    return React.cloneElement(child, props);\n                }\n                return null;\n            }, this);\n            elements.push(_items);\n        }\n        return (\n            <React.Fragment>\n                { elements }\n            </React.Fragment>\n        )\n    }\n\n}\n\n\nForEach.propTypes = {\n    of: PropTypes.array.isRequired,\n    as: PropTypes.string.isRequired\n};\n\nexport default ForEach;\n"]}
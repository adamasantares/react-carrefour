{"version":3,"sources":["../src/ForEach.js"],"names":["ForEach","props","children","debug","Array","isArray","argument","as","elements","key","console","log","length","value","_items","map","child","type","name","React","cloneElement","push","of","Component","propTypes","PropTypes","array","isRequired","string"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAGMA,O;;;;;;;;;;;iCAGF;AAAA;;AACI,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAhB,EAA0B;AACtB,uBAAO,IAAP;AACH;AACD,gBAAMC,QAAQ,KAAKF,KAAL,CAAWE,KAAX,IAAoB,KAAlC;AACA,gBAAID,WAAW,KAAKD,KAAL,CAAWC,QAA1B;AACA,gBAAI,CAACE,MAAMC,OAAN,CAAcH,QAAd,CAAL,EAA8B;AAC1BA,2BAAW,CAAEA,QAAF,CAAX;AACH;AACD,gBAAMI,WAAW,KAAKL,KAAL,CAAWM,EAA5B;AACA,gBAAMC,WAAW,EAAjB;AACA,gBAAIC,MAAM,CAAV;AACA,gBAAIN,KAAJ,EAAWO,QAAQC,GAAR,eAAwBR,KAAxB,oCAA4DD,SAASU,MAArE;;AAZf,uCAaeC,KAbf;AAcQ,oBAAMC,SAASZ,SAASa,GAAT,CAAa,iBAAS;AACjC,wBAAIZ,KAAJ,EAAWO,QAAQC,GAAR,CAAY,cAAYR,KAAZ,iBAA+Ba,MAAMC,IAAN,GAAaD,MAAMC,IAAN,CAAWC,IAAxB,UAAsCF,KAAtC,yCAAsCA,KAAtC,CAA/B,CAAZ;AACX,wBAAI,OAAOA,KAAP,KAAkB,UAAtB,EAAkC;AAC9BA,gCAAQA,MAAMH,KAAN,CAAR;AACA,4BAAMZ,QAAQ,EAAEQ,QAAF,EAAd;AACAA;AACA,+BAAOU,gBAAMC,YAAN,CAAmBJ,KAAnB,EAA0Bf,KAA1B,CAAP;AACH;AACD,wBAAIe,MAAMC,IAAN,IAAcD,MAAMf,KAAxB,EAA+B;AAC3B,4BAAMA,SAAQ,EAAEQ,QAAF,EAAd;AACAR,+BAAMK,QAAN,IAAkBO,KAAlB;AACAJ;AACA,+BAAOU,gBAAMC,YAAN,CAAmBJ,KAAnB,EAA0Bf,MAA1B,CAAP;AACH;AACD,2BAAO,IAAP;AACH,iBAfc,EAeZ,MAfY,CAAf;AAgBAO,yBAASa,IAAT,CAAcP,MAAd;AA9BR;;AAAA;AAAA;AAAA;;AAAA;AAaI,qCAAoB,KAAKb,KAAL,CAAWqB,EAA/B,8HAAmC;AAAA,wBAAxBT,KAAwB;;AAAA,0BAAxBA,KAAwB;AAkBlC;AA/BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgCI,mBACI;AAAC,+BAAD,CAAO,QAAP;AAAA;AACML;AADN,aADJ;AAKH;;;;EAxCiBW,gBAAMI,S;;AA6C5BvB,QAAQwB,SAAR,GAAoB;AAChBF,QAAIG,oBAAUC,KAAV,CAAgBC,UADJ;AAEhBpB,QAAIkB,oBAAUG,MAAV,CAAiBD,UAFL;AAGhBxB,WAAOsB,oBAAUG;AAHD,CAApB;;kBAMe5B,O","file":"ForEach.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass ForEach extends React.Component {\n\n    render()\n    {\n        if (!this.props.children) {\n            return null;\n        }\n        const debug = this.props.debug || false;\n        let children = this.props.children;\n        if (!Array.isArray(children)) {\n            children = [ children ];\n        }\n        const argument = this.props.as;\n        const elements = [];\n        let key = 0;\n        if (debug) console.log(`ForEach (${debug}): total children number is ${children.length}`);\n        for (const value of this.props.of) {\n            const _items = children.map(child => {\n                if (debug) console.log(`ForEach (${debug}): item ` + (child.type ? child.type.name : typeof(child)));\n                if (typeof(child) === 'function') {\n                    child = child(value);\n                    const props = { key };\n                    key++;\n                    return React.cloneElement(child, props);\n                }\n                if (child.type && child.props) {\n                    const props = { key };\n                    props[argument] = value;\n                    key++;\n                    return React.cloneElement(child, props);\n                }\n                return null;\n            }, this);\n            elements.push(_items);\n        }\n        return (\n            <React.Fragment>\n                { elements }\n            </React.Fragment>\n        )\n    }\n\n}\n\n\nForEach.propTypes = {\n    of: PropTypes.array.isRequired,\n    as: PropTypes.string.isRequired,\n    debug: PropTypes.string\n};\n\nexport default ForEach;\n"]}
{"version":3,"sources":["../src/IfTrue.js"],"names":["IfTrue","props","children","debug","Array","isArray","console","log","length","statement","condition","st","allowedChildren","orElse","child","name","push","React","Component","propTypes","PropTypes","bool","string"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,M;;;;;;;;;;;iCAGF;AACI,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAhB,EAA0B;AACtB,uBAAO,IAAP;AACH;AACD,gBAAMC,QAAQ,KAAKF,KAAL,CAAWE,KAAX,IAAoB,KAAlC;AACA,gBAAID,WAAW,KAAKD,KAAL,CAAWC,QAA1B;AACA,gBAAI,CAACE,MAAMC,OAAN,CAAcH,QAAd,CAAL,EAA8B;AAC1BA,2BAAW,CAAEA,QAAF,CAAX;AACH;AACD,gBAAIC,KAAJ,EAAWG,QAAQC,GAAR,cAAuBJ,KAAvB,oCAA2DD,SAASM,MAApE;AACX,gBAAMC,YAAY,OAAO,KAAKR,KAAL,CAAWS,SAAlB,KAAgC,WAAhC,GACd,KAAKT,KAAL,CAAWS,SADG,GACU,KAAKT,KAAL,CAAWQ,SAAX,IAAwB,KAAKR,KAAL,CAAWU,EAD/D;AAEA,gBAAMC,kBAAkB,EAAxB;AACA,gBAAIC,SAAS,KAAb;AACA;AACA,gBAAI,CAACJ,SAAL,EAAgB;AACZ,oBAAIN,KAAJ,EAAWG,QAAQC,GAAR,cAAuBJ,KAAvB;AADC;AAAA;AAAA;;AAAA;AAEZ,yCAAoBD,QAApB,8HAA8B;AAAA,4BAAnBY,KAAmB;;AAC1B,4BAAMC,OAAO,sBAAUD,KAAV,CAAb;AACA,4BAAIX,KAAJ,EAAWG,QAAQC,GAAR,cAAuBJ,KAAvB,iBAAwCY,IAAxC,EAAgDD,KAAhD;AACX,4BAAIC,SAAS,QAAb,EAAuB;AACnB,gCAAIZ,KAAJ,EAAWG,QAAQC,GAAR,cAAuBJ,KAAvB;AACXU,qCAAS,IAAT;AACH,yBAHD,MAGO;AACH,gCAAIA,MAAJ,EAAY;AACRD,gDAAgBI,IAAhB,CAAqBF,KAArB;AACH;AACJ;AACJ;AAbW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcf,aAdD,MAcO;AACH,oBAAIX,KAAJ,EAAWG,QAAQC,GAAR,cAAuBJ,KAAvB;AADR;AAAA;AAAA;;AAAA;AAEH,0CAAoBD,QAApB,mIAA8B;AAAA,4BAAnBY,MAAmB;;AAC1B,4BAAMC,QAAO,sBAAUD,MAAV,CAAb;AACA,4BAAIX,KAAJ,EAAWG,QAAQC,GAAR,cAAuBJ,KAAvB,iBAAwCY,KAAxC,EAAgDD,MAAhD;AACX,4BAAIC,UAAS,QAAb,EAAuB;AACnB,gCAAIZ,KAAJ,EAAWG,QAAQC,GAAR,cAAuBJ,KAAvB;AACX;AACH;AACDS,wCAAgBI,IAAhB,CAAqBF,MAArB;AACH;AAVE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWN;AACD,gBAAIX,KAAJ,EAAWG,QAAQC,GAAR,cAAuBJ,KAAvB,wCAA+DS,gBAAgBJ,MAA/E;AACX,mBAAOI,gBAAgBJ,MAAhB,GAAyB,CAAzB,GACF;AAAC,+BAAD,CAAO,QAAP;AAAA;AAAkBI;AAAlB,aADE,GACsD,IAD7D;AAEH;;;;EA/CgBK,gBAAMC,S;;AAoD3BlB,OAAOmB,SAAP,GAAmB;AACfV,eAAWW,oBAAUC,IADN;AAEfV,QAAIS,oBAAUC,IAFC;AAGflB,WAAOiB,oBAAUE;AAHF,CAAnB;;kBAMetB,M","file":"IfTrue.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport OrElse from './OrElse';\nimport { childName } from './utils';\n\nclass IfTrue extends React.Component {\n\n    render()\n    {\n        if (!this.props.children) {\n            return null;\n        }\n        const debug = this.props.debug || false;\n        let children = this.props.children;\n        if (!Array.isArray(children)) {\n            children = [ children ];\n        }\n        if (debug) console.log(`IfTrue (${debug}): total children number is ${children.length}`);\n        const statement = typeof this.props.condition !== 'undefined' ?\n            this.props.condition : (this.props.statement || this.props.st);\n        const allowedChildren = [];\n        let orElse = false;\n        // TODO REDO React.Children.map(children, (child, i) ?\n        if (!statement) {\n            if (debug) console.log(`IfTrue (${debug}): statement = false`);\n            for (const child of children) {\n                const name = childName(child);\n                if (debug) console.log(`IfTrue (${debug}): child ${name}`, child);\n                if (name === 'OrElse') {\n                    if (debug) console.log(`IfTrue (${debug}): OrElse detected. Start output children.`);\n                    orElse = true;\n                } else {\n                    if (orElse) {\n                        allowedChildren.push(child);\n                    }\n                }\n            }\n        } else {\n            if (debug) console.log(`IfTrue (${debug}): statement = true`);\n            for (const child of children) {\n                const name = childName(child);\n                if (debug) console.log(`IfTrue (${debug}): child ${name}`, child);\n                if (name === 'OrElse') {\n                    if (debug) console.log(`IfTrue (${debug}): OrElse detected. Break output children.`);\n                    break;\n                }\n                allowedChildren.push(child);\n            }\n        }\n        if (debug) console.log(`IfTrue (${debug}): result number of children is ${allowedChildren.length}`);\n        return allowedChildren.length > 0 ?\n            (<React.Fragment>{ allowedChildren }</React.Fragment>) : null;\n    }\n\n}\n\n\nIfTrue.propTypes = {\n    statement: PropTypes.bool,\n    st: PropTypes.bool,\n    debug: PropTypes.string\n};\n\nexport default IfTrue;\n"]}
{"version":3,"sources":["../src/Switch.js"],"names":["Switch","props","children","debug","Array","isArray","expression","exp","console","log","length","allCases","child","name","push","val","map","i","React","cloneElement","key","values","Component","propTypes","PropTypes","oneOfType","string","number"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEMA,M;;;;;;;;;;;iCAGF;AACI,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAhB,EAA0B;AACtB,uBAAO,IAAP;AACH;AACD,gBAAMC,QAAQ,KAAKF,KAAL,CAAWE,KAAX,IAAoB,KAAlC;AACA,gBAAID,WAAW,KAAKD,KAAL,CAAWC,QAA1B;AACA,gBAAI,CAACE,MAAMC,OAAN,CAAcH,QAAd,CAAL,EAA8B;AAC1BA,2BAAW,CAAEA,QAAF,CAAX;AACH;AACD,gBAAMI,aAAa,KAAKL,KAAL,CAAWK,UAAX,IAAyB,KAAKL,KAAL,CAAWM,GAAvD;AACA,gBAAIJ,KAAJ,EAAWK,QAAQC,GAAR,cAAuBN,KAAvB,uBAAgDG,UAAhD;AACX,gBAAIH,KAAJ,EAAWK,QAAQC,GAAR,cAAuBN,KAAvB,oCAA2DD,SAASQ,MAApE;;AAEX;AACA,gBAAMC,WAAW,EAAjB;AAdJ;AAAA;AAAA;;AAAA;AAeI,qCAAoBT,QAApB,8HAA8B;AAAA,wBAAnBU,KAAmB;;AAC1B,wBAAMC,OAAO,sBAAUD,KAAV,CAAb;AACA,wBAAIT,KAAJ,EAAWK,QAAQC,GAAR,cAAuBN,KAAvB,iBAAwCU,IAAxC;AACX,wBAAIA,SAAS,MAAb,EAAqB;AACjBF,iCAASG,IAAT,CAAcF,MAAMX,KAAN,CAAYc,GAA1B;AACH;AACJ;AArBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBI,gBAAIZ,KAAJ,EAAWK,QAAQC,GAAR,cAAuBN,KAAvB,2BAAkDQ,SAASD,MAA3D;;AAEXR,uBAAWA,SAASc,GAAT,CAAa,UAACJ,KAAD,EAAQK,CAAR,EAAc;AAClC,oBAAMJ,OAAO,sBAAUD,KAAV,CAAb;AACA,oBAAIC,SAAS,aAAb,EAA4B;AACxB,2BAAOK,gBAAMC,YAAN,CAAmBP,KAAnB,EAA0B;AAC7BQ,6BAAKH,CADwB;AAE7BI,gCAAQV,QAFqB;AAG7BL,8CAH6B;AAI7BH;AAJ6B,qBAA1B,CAAP;AAMH;AACD,uBAAOe,gBAAMC,YAAN,CAAmBP,KAAnB,EAA0B;AAC7BQ,yBAAKH,CADwB;AAE7BF,yBAAKH,MAAMX,KAAN,CAAYc,GAFY;AAG7BT,0CAH6B;AAI7BH;AAJ6B,iBAA1B,CAAP;AAMH,aAhBU,EAgBR,IAhBQ,CAAX;;AAkBA,mBACI;AAAC,+BAAD,CAAO,QAAP;AAAA;AACMD;AADN,aADJ;AAKH;;;;EAlDgBgB,gBAAMI,S;;AAuD3BtB,OAAOuB,SAAP,GAAmB;AACfjB,gBAAYkB,oBAAUC,SAAV,CAAoB,CAC5BD,oBAAUE,MADkB,EAE5BF,oBAAUG,MAFkB,CAApB,CADG;AAKfpB,SAAKiB,oBAAUC,SAAV,CAAoB,CACrBD,oBAAUE,MADW,EAErBF,oBAAUG,MAFW,CAApB,CALU;AASfxB,WAAOqB,oBAAUE;AATF,CAAnB;;kBAYe1B,M","file":"Switch.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Case from './Case';\nimport CaseDefault from './CaseDefault';\nimport { childName } from './utils';\n\nclass Switch extends React.Component {\n\n    render()\n    {\n        if (!this.props.children) {\n            return null;\n        }\n        const debug = this.props.debug || false;\n        let children = this.props.children;\n        if (!Array.isArray(children)) {\n            children = [ children ];\n        }\n        const expression = this.props.expression || this.props.exp;\n        if (debug) console.log(`Switch (${debug}): expression is`, expression);\n        if (debug) console.log(`Switch (${debug}): total children number is ${children.length}`);\n\n        // all values for CaseDefault\n        const allCases = [];\n        for (const child of children) {\n            const name = childName(child);\n            if (debug) console.log(`Switch (${debug}): child ${name}`);\n            if (name === 'Case') {\n                allCases.push(child.props.val);\n            }\n        }\n        if (debug) console.log(`Switch (${debug}): cases number is ${allCases.length}`);\n\n        children = children.map((child, i) => {\n            const name = childName(child);\n            if (name === 'CaseDefault') {\n                return React.cloneElement(child, {\n                    key: i,\n                    values: allCases,\n                    expression,\n                    debug\n                });\n            }\n            return React.cloneElement(child, {\n                key: i,\n                val: child.props.val,\n                expression,\n                debug\n            });\n        }, this);\n\n        return (\n            <React.Fragment>\n                { children }\n            </React.Fragment>\n        )\n    }\n\n}\n\n\nSwitch.propTypes = {\n    expression: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    exp: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    debug: PropTypes.string\n};\n\nexport default Switch;\n"]}
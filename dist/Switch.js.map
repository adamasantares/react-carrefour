{"version":3,"sources":["../src/Switch.js"],"names":["Switch","props","children","Array","isArray","expression","exp","allCases","child","push","val","map","i","type","name","React","cloneElement","key","values","Component","propTypes","PropTypes","oneOfType","string","number"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,M;;;;;;;;;;;iCAGF;AACI,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAhB,EAA0B;AACtB,uBAAO,IAAP;AACH;AACD,gBAAIA,WAAW,KAAKD,KAAL,CAAWC,QAA1B;AACA,gBAAI,CAACC,MAAMC,OAAN,CAAcF,QAAd,CAAL,EAA8B;AAC1BA,2BAAW,CAAEA,QAAF,CAAX;AACH;AACD,gBAAMG,aAAa,KAAKJ,KAAL,CAAWI,UAAX,IAAyB,KAAKJ,KAAL,CAAWK,GAAvD;;AAEA;AACA,gBAAMC,WAAW,EAAjB;AAXJ;AAAA;AAAA;;AAAA;AAYI,qCAAoBL,QAApB,8HAA8B;AAAA,wBAAnBM,KAAmB;;AAC1BD,6BAASE,IAAT,CAAcD,MAAMP,KAAN,CAAYS,GAA1B;AACH;AAdL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBIR,uBAAWA,SAASS,GAAT,CAAa,UAACH,KAAD,EAAQI,CAAR,EAAc;AAClC,oBAAIJ,MAAMK,IAAN,IAAcL,MAAMK,IAAN,CAAWC,IAAX,KAAoB,aAAtC,EAAqD;AACjD,2BAAOC,gBAAMC,YAAN,CAAmBR,KAAnB,EAA0B;AAC7BS,6BAAKL,CADwB;AAE7BM,gCAAQX,QAFqB;AAG7BF;AAH6B,qBAA1B,CAAP;AAKH;AACD,uBAAOU,gBAAMC,YAAN,CAAmBR,KAAnB,EAA0B;AAC7BS,yBAAKL,CADwB;AAE7BF,yBAAKF,MAAMP,KAAN,CAAYS,GAFY;AAG7BL;AAH6B,iBAA1B,CAAP;AAKH,aAbU,EAaR,IAbQ,CAAX;;AAeA,mBACI;AAAC,+BAAD,CAAO,QAAP;AAAA;AACMH;AADN,aADJ;AAKH;;;;EAvCgBa,gBAAMI,S;;AA4C3BnB,OAAOoB,SAAP,GAAmB;AACff,gBAAYgB,oBAAUC,SAAV,CAAoB,CAC5BD,oBAAUE,MADkB,EAE5BF,oBAAUG,MAFkB,CAApB,CADG;AAKflB,SAAKe,oBAAUC,SAAV,CAAoB,CACrBD,oBAAUE,MADW,EAErBF,oBAAUG,MAFW,CAApB;AALU,CAAnB;;kBAWexB,M","file":"Switch.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Case from './Case';\nimport CaseDefault from './CaseDefault';\n\nclass Switch extends React.Component {\n\n    render()\n    {\n        if (!this.props.children) {\n            return null;\n        }\n        let children = this.props.children;\n        if (!Array.isArray(children)) {\n            children = [ children ];\n        }\n        const expression = this.props.expression || this.props.exp;\n\n        // all values for CaseDefault\n        const allCases = [];\n        for (const child of children) {\n            allCases.push(child.props.val);\n        }\n\n        children = children.map((child, i) => {\n            if (child.type && child.type.name === 'CaseDefault') {\n                return React.cloneElement(child, {\n                    key: i,\n                    values: allCases,\n                    expression\n                });\n            }\n            return React.cloneElement(child, {\n                key: i,\n                val: child.props.val,\n                expression\n            });\n        }, this);\n\n        return (\n            <React.Fragment>\n                { children }\n            </React.Fragment>\n        )\n    }\n\n}\n\n\nSwitch.propTypes = {\n    expression: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    exp: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n};\n\nexport default Switch;\n"]}
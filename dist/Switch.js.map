{"version":3,"sources":["../src/Switch.js"],"names":["Switch","props","children","debug","Array","isArray","expression","exp","console","log","allCases","child","push","val","length","map","i","type","name","React","cloneElement","key","values","Component","propTypes","PropTypes","oneOfType","string","number"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,M;;;;;;;;;;;iCAGF;AACI,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAhB,EAA0B;AACtB,uBAAO,IAAP;AACH;AACD,gBAAMC,QAAQ,KAAKF,KAAL,CAAWE,KAAX,IAAoB,KAAlC;AACA,gBAAID,WAAW,KAAKD,KAAL,CAAWC,QAA1B;AACA,gBAAI,CAACE,MAAMC,OAAN,CAAcH,QAAd,CAAL,EAA8B;AAC1BA,2BAAW,CAAEA,QAAF,CAAX;AACH;AACD,gBAAMI,aAAa,KAAKL,KAAL,CAAWK,UAAX,IAAyB,KAAKL,KAAL,CAAWM,GAAvD;AACA,gBAAIJ,KAAJ,EAAWK,QAAQC,GAAR,cAAuBN,KAAvB,uBAAgDG,UAAhD;;AAEX;AACA,gBAAMI,WAAW,EAAjB;AAbJ;AAAA;AAAA;;AAAA;AAcI,qCAAoBR,QAApB,8HAA8B;AAAA,wBAAnBS,KAAmB;;AAC1BD,6BAASE,IAAT,CAAcD,MAAMV,KAAN,CAAYY,GAA1B;AACH;AAhBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBI,gBAAIV,KAAJ,EAAWK,QAAQC,GAAR,cAAuBN,KAAvB,2BAAkDO,SAASI,MAA3D;;AAEXZ,uBAAWA,SAASa,GAAT,CAAa,UAACJ,KAAD,EAAQK,CAAR,EAAc;AAClC,oBAAIL,MAAMM,IAAN,IAAcN,MAAMM,IAAN,CAAWC,IAAX,KAAoB,aAAtC,EAAqD;AACjD,2BAAOC,gBAAMC,YAAN,CAAmBT,KAAnB,EAA0B;AAC7BU,6BAAKL,CADwB;AAE7BM,gCAAQZ,QAFqB;AAG7BJ,8CAH6B;AAI7BH;AAJ6B,qBAA1B,CAAP;AAMH;AACD,uBAAOgB,gBAAMC,YAAN,CAAmBT,KAAnB,EAA0B;AAC7BU,yBAAKL,CADwB;AAE7BH,yBAAKF,MAAMV,KAAN,CAAYY,GAFY;AAG7BP,0CAH6B;AAI7BH;AAJ6B,iBAA1B,CAAP;AAMH,aAfU,EAeR,IAfQ,CAAX;;AAiBA,mBACI;AAAC,+BAAD,CAAO,QAAP;AAAA;AACMD;AADN,aADJ;AAKH;;;;EA5CgBiB,gBAAMI,S;;AAiD3BvB,OAAOwB,SAAP,GAAmB;AACflB,gBAAYmB,oBAAUC,SAAV,CAAoB,CAC5BD,oBAAUE,MADkB,EAE5BF,oBAAUG,MAFkB,CAApB,CADG;AAKfrB,SAAKkB,oBAAUC,SAAV,CAAoB,CACrBD,oBAAUE,MADW,EAErBF,oBAAUG,MAFW,CAApB,CALU;AASfzB,WAAOsB,oBAAUE;AATF,CAAnB;;kBAYe3B,M","file":"Switch.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Case from './Case';\nimport CaseDefault from './CaseDefault';\n\nclass Switch extends React.Component {\n\n    render()\n    {\n        if (!this.props.children) {\n            return null;\n        }\n        const debug = this.props.debug || false;\n        let children = this.props.children;\n        if (!Array.isArray(children)) {\n            children = [ children ];\n        }\n        const expression = this.props.expression || this.props.exp;\n        if (debug) console.log(`Switch (${debug}): expression is`, expression);\n\n        // all values for CaseDefault\n        const allCases = [];\n        for (const child of children) {\n            allCases.push(child.props.val);\n        }\n        if (debug) console.log(`Switch (${debug}): cases number is ${allCases.length}`);\n\n        children = children.map((child, i) => {\n            if (child.type && child.type.name === 'CaseDefault') {\n                return React.cloneElement(child, {\n                    key: i,\n                    values: allCases,\n                    expression,\n                    debug\n                });\n            }\n            return React.cloneElement(child, {\n                key: i,\n                val: child.props.val,\n                expression,\n                debug\n            });\n        }, this);\n\n        return (\n            <React.Fragment>\n                { children }\n            </React.Fragment>\n        )\n    }\n\n}\n\n\nSwitch.propTypes = {\n    expression: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    exp: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]),\n    debug: PropTypes.string\n};\n\nexport default Switch;\n"]}
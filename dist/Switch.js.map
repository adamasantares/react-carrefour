{"version":3,"sources":["../src/Switch.js"],"names":["Switch","props","children","allCases","child","push","val","map","i","type","name","React","cloneElement","key","values","expression","Component","propTypes","PropTypes","oneOfType","string","number","isRequired"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,M;;;;;;;;;;;iCAGF;AAAA;;AACI,gBAAI,CAAC,KAAKC,KAAL,CAAWC,QAAhB,EAA0B;AACtB,uBAAO,IAAP;AACH;;AAED;AACA,gBAAMC,WAAW,EAAjB;AANJ;AAAA;AAAA;;AAAA;AAOI,qCAAoB,KAAKF,KAAL,CAAWC,QAA/B,8HAAyC;AAAA,wBAA9BE,KAA8B;;AACrCD,6BAASE,IAAT,CAAcD,MAAMH,KAAN,CAAYK,GAA1B;AACH;AATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWI,gBAAMJ,WAAW,KAAKD,KAAL,CAAWC,QAAX,CAAoBK,GAApB,CAAwB,UAACH,KAAD,EAAQI,CAAR,EAAc;AACnD,oBAAIJ,MAAMK,IAAN,CAAWC,IAAX,KAAoB,aAAxB,EAAuC;AACnC,2BAAOC,gBAAMC,YAAN,CAAmBR,KAAnB,EAA0B;AAC7BS,6BAAKL,CADwB;AAE7BM,gCAAQX,QAFqB;AAG7BY,oCAAY,OAAKd,KAAL,CAAWc;AAHM,qBAA1B,CAAP;AAKH;AACD,uBAAOJ,gBAAMC,YAAN,CAAmBR,KAAnB,EAA0B;AAC7BS,yBAAKL,CADwB;AAE7BF,yBAAKF,MAAMH,KAAN,CAAYK,GAFY;AAG7BS,gCAAY,OAAKd,KAAL,CAAWc;AAHM,iBAA1B,CAAP;AAKH,aAbgB,EAad,IAbc,CAAjB;;AAeA,mBACI;AAAC,+BAAD,CAAO,QAAP;AAAA;AACMb;AADN,aADJ;AAKH;;;;EAlCgBS,gBAAMK,S;;AAuC3BhB,OAAOiB,SAAP,GAAmB;AACfF,gBAAYG,oBAAUC,SAAV,CAAoB,CAC5BD,oBAAUE,MADkB,EAE5BF,oBAAUG,MAFkB,CAApB,EAGTC;AAJY,CAAnB;;kBAOetB,M","file":"Switch.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Case from './Case';\nimport CaseDefault from './CaseDefault';\n\nclass Switch extends React.Component {\n\n    render()\n    {\n        if (!this.props.children) {\n            return null;\n        }\n\n        // all values for CaseDefault\n        const allCases = [];\n        for (const child of this.props.children) {\n            allCases.push(child.props.val);\n        }\n\n        const children = this.props.children.map((child, i) => {\n            if (child.type.name === 'CaseDefault') {\n                return React.cloneElement(child, {\n                    key: i,\n                    values: allCases,\n                    expression: this.props.expression\n                });\n            }\n            return React.cloneElement(child, {\n                key: i,\n                val: child.props.val,\n                expression: this.props.expression\n            });\n        }, this);\n\n        return (\n            <React.Fragment>\n                { children }\n            </React.Fragment>\n        )\n    }\n\n}\n\n\nSwitch.propTypes = {\n    expression: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n    ]).isRequired,\n};\n\nexport default Switch;\n"]}